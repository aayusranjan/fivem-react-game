{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import \"./Typer.css\";\n// // import \"./script.js\";\n// const CHARS_PER_STROKES = 3\n\n// const HackerTypeClone = () => {\n//   const [sourceCode, setSourceCode] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   const containerRef = useRef(null);\n//     const paragraphRef = useRef(null);\n\n//   useEffect(() => {\n//     containerRef.current.focus();\n//     fetch(\"code.txt\")\n//       .then((res) => res.text())\n//       .then((text) => setSourceCode(text));\n//   }, []);\n\n//   const runScript = () => {\n//     setCurrentIndex(currentIndex+CHARS_PER_STROKES);\n//     setContent(sourceCode.substring(0,currentIndex))\n//   };\n\n//   paragraphRef.current.scrollIntoView();\n\n//   const removeMessage = () => {\n//     console.log(\"remove message\");\n//   };\n//   const handleKeyDown = (e) => {\n//     if (e.key !== \"Escape\") runScript();\n\n//     else removeMessage();\n//   };\n//   return (\n//     <div\n//       id=\"container\"\n//       onKeyDown={handleKeyDown}\n//       tabIndex={0}\n//       ref={containerRef}\n//     >\n//       <div id=\"source\">{content}</div>\n//       <p ref={paragraphRef}></p>\n//     </div>\n//   );\n// };\n\n// export default HackerTypeClone;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import GameBox from \"./GameBox\";\n// import \"./Typer.css\";\n\n// const CHARS_PER_STROKES = 3;\n\n// const HackerTypeClone = () => {\n//   const [sourceCode, setSourceCode] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [currentIndex, setCurrentIndex] = useState(0);\n//   const [completedRuns, setCompletedRuns] = useState(0);\n//   const [showWhiteScreen, setShowWhiteScreen] = useState(false);\n\n//   const containerRef = useRef(null);\n//   const paragraphRef = useRef(null);\n\n//   useEffect(() => {\n//     containerRef.current.focus();\n//     fetch(\"code.txt\")\n//       .then((res) => res.text())\n//       .then((text) => setSourceCode(text));\n//   }, []);\n\n// //   const runScript = () => {\n// //     setCurrentIndex(currentIndex + CHARS_PER_STROKES);\n// //     setContent(sourceCode.substring(0, currentIndex));\n// //     paragraphRef.current.scrollIntoView();\n// //   };\n// const runScript = () => {\n//     setCurrentIndex(currentIndex + CHARS_PER_STROKES);\n//     setContent(sourceCode.substring(0, currentIndex));\n//     if (completedRuns >= 100) {\n//       setShowWhiteScreen(true);\n//     } else {\n//       setCompletedRuns(completedRuns + 1);\n//     }\n//     paragraphRef.current.scrollIntoView();\n//   };\n\n//   const removeMessage = () => {\n//     console.log(\"remove message\");\n//   };\n\n//   const handleKeyDown = (e) => {\n//     if (e.key !== \"Escape\") runScript();\n//     else removeMessage();\n//   };\n\n//   return (\n//     <>\n//       <div className=\"box\">\n//         <div\n//           id=\"container\"\n//           onKeyDown={handleKeyDown}\n//           tabIndex={0}\n//           ref={containerRef}\n//         >\n//           <div id=\"source\">{content}</div>\n//           <p ref={paragraphRef}></p>\n//         </div>\n//         {showWhiteScreen && <GameBox />}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default HackerTypeClone;","map":{"version":3,"names":[],"sources":["C:/Users/ayush/OneDrive/New folder/javascript/20javaScriptProjecttraversemedia/areact/src/Typer.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"./Typer.css\";\r\n// // import \"./script.js\";\r\n// const CHARS_PER_STROKES = 3\r\n\r\n// const HackerTypeClone = () => {\r\n//   const [sourceCode, setSourceCode] = useState(\"\");\r\n//   const [content, setContent] = useState(\"\");\r\n//   const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n//   const containerRef = useRef(null);\r\n//     const paragraphRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     containerRef.current.focus();\r\n//     fetch(\"code.txt\")\r\n//       .then((res) => res.text())\r\n//       .then((text) => setSourceCode(text));\r\n//   }, []);\r\n\r\n//   const runScript = () => {\r\n//     setCurrentIndex(currentIndex+CHARS_PER_STROKES);\r\n//     setContent(sourceCode.substring(0,currentIndex))\r\n//   };\r\n\r\n//   paragraphRef.current.scrollIntoView();\r\n\r\n//   const removeMessage = () => {\r\n//     console.log(\"remove message\");\r\n//   };\r\n//   const handleKeyDown = (e) => {\r\n//     if (e.key !== \"Escape\") runScript();\r\n   \r\n//     else removeMessage();\r\n//   };\r\n//   return (\r\n//     <div\r\n//       id=\"container\"\r\n//       onKeyDown={handleKeyDown}\r\n//       tabIndex={0}\r\n//       ref={containerRef}\r\n//     >\r\n//       <div id=\"source\">{content}</div>\r\n//       <p ref={paragraphRef}></p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default HackerTypeClone;\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import GameBox from \"./GameBox\";\r\n// import \"./Typer.css\";\r\n\r\n// const CHARS_PER_STROKES = 3;\r\n\r\n// const HackerTypeClone = () => {\r\n//   const [sourceCode, setSourceCode] = useState(\"\");\r\n//   const [content, setContent] = useState(\"\");\r\n//   const [currentIndex, setCurrentIndex] = useState(0);\r\n//   const [completedRuns, setCompletedRuns] = useState(0);\r\n//   const [showWhiteScreen, setShowWhiteScreen] = useState(false);\r\n\r\n//   const containerRef = useRef(null);\r\n//   const paragraphRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     containerRef.current.focus();\r\n//     fetch(\"code.txt\")\r\n//       .then((res) => res.text())\r\n//       .then((text) => setSourceCode(text));\r\n//   }, []);\r\n\r\n// //   const runScript = () => {\r\n// //     setCurrentIndex(currentIndex + CHARS_PER_STROKES);\r\n// //     setContent(sourceCode.substring(0, currentIndex));\r\n// //     paragraphRef.current.scrollIntoView();\r\n// //   };\r\n// const runScript = () => {\r\n//     setCurrentIndex(currentIndex + CHARS_PER_STROKES);\r\n//     setContent(sourceCode.substring(0, currentIndex));\r\n//     if (completedRuns >= 100) {\r\n//       setShowWhiteScreen(true);\r\n//     } else {\r\n//       setCompletedRuns(completedRuns + 1);\r\n//     }\r\n//     paragraphRef.current.scrollIntoView();\r\n//   };\r\n\r\n//   const removeMessage = () => {\r\n//     console.log(\"remove message\");\r\n//   };\r\n\r\n//   const handleKeyDown = (e) => {\r\n//     if (e.key !== \"Escape\") runScript();\r\n//     else removeMessage();\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"box\">\r\n//         <div\r\n//           id=\"container\"\r\n//           onKeyDown={handleKeyDown}\r\n//           tabIndex={0}\r\n//           ref={containerRef}\r\n//         >\r\n//           <div id=\"source\">{content}</div>\r\n//           <p ref={paragraphRef}></p>\r\n//         </div>\r\n//         {showWhiteScreen && <GameBox />}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default HackerTypeClone;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}