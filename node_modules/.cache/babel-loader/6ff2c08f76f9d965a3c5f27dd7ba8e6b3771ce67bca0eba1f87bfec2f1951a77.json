{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\OneDrive\\\\New folder\\\\javascript\\\\20javaScriptProjecttraversemedia\\\\areact\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n *\r\n * State:\r\n *\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  // useEffect(() => {\n  //   setBoard(setBoard());\n  // })\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      const newRow = [];\n      for (let j = 0; j < ncols; j++) {\n        newRow.push(false);\n      }\n      initialBoard.push(newRow);\n    }\n    const ranNum = max => Math.floor(Math.random() * max);\n    const flipSpots = (x, y) => {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        initialBoard[y][x] = !initialBoard[y][x];\n      }\n    };\n    const numClicks = (ncols + nrows) % 2 ? ncols + nrows : ncols + nrows - 1;\n    for (let i = 0; i < numClicks; i++) {\n      const x = ranNum(ncols);\n      const y = ranNum(nrows);\n      flipSpots(x, y);\n      flipSpots(x + 1, y);\n      flipSpots(x - 1, y);\n      flipSpots(x, y + 1);\n      flipSpots(x, y - 1);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    console.log(`Clicked cell at ${coord}`);\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const boardCopy = [...oldBoard];\n      flipCell(y, x, boardCopy);\n      // flip cells around as well\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      return boardCopy;\n    });\n  }\n  const tableEle = /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board-table\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((column, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          id: `${y}-${x}`,\n          isLit: column,\n          flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: hasWon() ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"Board-title\",\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }, this) : tableEle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","board","setBoard","createBoard","initialBoard","i","newRow","j","push","ranNum","max","Math","floor","random","flipSpots","x","y","numClicks","hasWon","every","row","cell","flipCellsAround","coord","console","log","oldBoard","split","map","Number","flipCell","boardCopy","tableEle","className","children","column","id","isLit","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ayush/OneDrive/New folder/javascript/20javaScriptProjecttraversemedia/areact/src/Board.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"./Board.css\";\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n *\r\n * State:\r\n *\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nfunction Board({ nrows = 5, ncols = 5 }) {\r\n  const [board, setBoard] = useState(createBoard());\r\n\r\n  // useEffect(() => {\r\n  //   setBoard(setBoard());\r\n  // })\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n  function createBoard() {\r\n    const initialBoard = [];\r\n    for (let i = 0; i < nrows; i++) {\r\n      const newRow = [];\r\n      for (let j = 0; j < ncols; j++) {\r\n        newRow.push(false);\r\n      }\r\n      initialBoard.push(newRow);\r\n    }\r\n    const ranNum = (max) => Math.floor(Math.random() * max);\r\n    const flipSpots = (x, y) => {\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        initialBoard[y][x] = !initialBoard[y][x];\r\n      }\r\n    };\r\n    const numClicks = (ncols + nrows) % 2 ? ncols + nrows : ncols + nrows - 1;\r\n    for (let i = 0; i < numClicks; i++) {\r\n      const x = ranNum(ncols);\r\n      const y = ranNum(nrows);\r\n      flipSpots(x, y);\r\n      flipSpots(x + 1, y);\r\n      flipSpots(x - 1, y);\r\n      flipSpots(x, y + 1);\r\n      flipSpots(x, y - 1);\r\n    }\r\n    return initialBoard;\r\n  }\r\n  \r\n\r\n  function hasWon() {\r\n    return board.every((row) => row.every((cell) => !cell));\r\n  }\r\n\r\n  function flipCellsAround(coord) {\r\n     console.log(`Clicked cell at ${coord}`);\r\n    setBoard((oldBoard) => {\r\n      const [y, x] = coord.split(\"-\").map(Number);\r\n\r\n      const flipCell = (y, x, boardCopy) => {\r\n        // if this coord is actually on board, flip it\r\n\r\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n          boardCopy[y][x] = !boardCopy[y][x];\r\n        }\r\n      };\r\n\r\n      const boardCopy = [...oldBoard];\r\n\r\n      flipCell(y, x, boardCopy);\r\n      // flip cells around as well\r\n      flipCell(y + 1, x, boardCopy);\r\n      flipCell(y - 1, x, boardCopy);\r\n      flipCell(y, x + 1, boardCopy);\r\n      flipCell(y, x - 1, boardCopy);\r\n      \r\n      return boardCopy;\r\n    });\r\n  }\r\n\r\n  const tableEle = (\r\n    <table className=\"Board-table\">\r\n      <tbody>\r\n        {board.map((row, y) => (\r\n          <tr key={y}>\r\n            {row.map((column, x) => (\r\n              <Cell\r\n                id={`${y}-${x}`}\r\n                key={`${y}-${x}`}\r\n                isLit={column}\r\n                flipCellsAroundMe={() => flipCellsAround(`${y}-${x}`)}\r\n              />\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n\r\n  return (\r\n    <div className=\"Board\">\r\n      {hasWon() ? <h2 className=\"Board-title\">You won!</h2> : tableEle}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}